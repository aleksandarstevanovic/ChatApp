{"version":3,"sources":["../node_modules/keyv/src sync","../node_modules/got/source sync","components/Signup.js","constants/ActionTypes.js","actions/Index.js","containers/Signin.js","components/MessageList.js","containers/MessageList.js","components/RoomHeader.js","containers/RoomHeader.js","components/Input.js","containers/Input.js","components/RoomList.js","containers/RoomList.js","components/NewRoomForm.js","containers/NewRoomForm.js","components/UserHeader.js","containers/UserHeader.js","components/ChatApp.js","App.js","serviceWorker.js","reducers/messages.js","reducers/user.js","reducers/rooms.js","reducers/index.js","sagas/userSaga.js","sagas/roomSaga.js","sagas/messageSaga.js","sagas/createRoomSaga.js","sagas/subscribeSaga.js","sagas/rootSaga.js","store/index.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","useStyles","makeStyles","theme","@global","body","backgroundColor","palette","common","white","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","secondary","main","form","width","submit","Signin","props","input","classes","react_default","a","createElement","Container","component","maxWidth","CssBaseline","className","Avatar","LockOutlined_default","Typography","variant","onSubmit","handleSubmit","TextField","required","fullWidth","label","name","autoFocus","inputRef","node","FormControlLabel","control","Checkbox","value","color","Button","type","ADD_USER","USER_CREATED","SEND_MESSAGE","MESSAGE_SENT","GET_MESSAGES","CLEAR_MESSAGES","GET_ROOMS","ROOM_LIST","CREATE_ROOM","JOIN_ROOM","ENTER_ROOM","joinRoom","roomId","roomName","types","payload","getMessages","message","connect","dispatch","user","preventDefault","SigninComponent","MessageList","ReactDOM","findDOMNode","this","scrollTop","scrollHeight","currentRoom","lib","style","height","messages","map","index","key","src","concat","alt","slice","Component","state","messagess","rooms","currentRoomId","currentUser","MessageListComponent","Room","RoomHeader","currentRoomName","RoomHeaderComponent","container","flexWrap","textField","marginLeft","marginRight","Input","disabled","autoComplete","target","InputComponent","RoomList","room","active","href","onClick","subscribe","joinableRooms","userProporties","subscribeToRoom","messageLimit","hooks","onMessage","message1","senderId","text","createdAt","sender","avatarURL","RoomListComponent","NewRoomForm","NewRoomFormComponent","User","UserHeader","UserComponent","ChatApp","_this","ChatManager","instanceLocator","userId","tokenProvider","TokenProvider","url","then","connectUser","catch","error","console","log","containers_RoomList_RoomList","containers_NewRoomForm_NewRoomForm","UserHeader_UserHeader","RoomHeader_RoomHeader","containers_MessageList_MessageList","containers_Input_Input","proporties","App","wiew","prevProps","prevState","setState","components_ChatApp","Signin_Signin","Boolean","window","location","hostname","match","initialState","arguments","length","undefined","action","Object","assign","currentId","users","joinedRooms","reducers","combineReducers","watchUser","workerUser","regenerator_default","wrap","_context","prev","next","takeEvery","stop","_marked","success","username","Chatkit","chatkit","_context2","require","default","createUser","err","status","put","t0","_marked2","watchRoom","workerRoom","roomSaga_marked","roomsList","getRooms","roomSaga_marked2","watchMessage","workerMessage","messageSaga_marked","getProporties","getCurrentRoom","select","sent","sendMessage","messageSaga_marked2","watchCreateRoom","workerCreateRoom","createRoomSaga_marked","createRoom","createRoomSaga_marked2","watchSubscribe","subscribeSaga_marked","subscribeSaga_marked2","_context3","_marked3","rootSaga","all","userSaga","roomSaga","createRoomSaga","subscribeSaga","messageSaga","rootSaga_marked","reduxDevTools","__REDUX_DEVTOOLS_EXTENSION__","SagaMiddleware","createSagaMiddleware","store","createStore","compose","applyMiddleware","run","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8c7dc422.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 471;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 479;","\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\n    const useStyles = makeStyles(theme => ({\r\n        '@global': {\r\n          body: {\r\n            backgroundColor: theme.palette.common.white,\r\n          },\r\n        },\r\n        paper: {\r\n          marginTop: theme.spacing(20),\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          alignItems: 'center',\r\n        },\r\n        avatar: {\r\n          margin: theme.spacing(1),\r\n          backgroundColor: theme.palette.secondary.main,\r\n        },\r\n        form: {\r\n          width: '100%', \r\n          marginTop: theme.spacing(1),\r\n        },\r\n        submit: {\r\n          margin: theme.spacing(3, 0, 2),\r\n        },\r\n      }));\r\n\r\n     const Signin=props=> {\r\n         let input\r\n        const classes = useStyles();\r\n            return(           \r\n<Container component=\"main\" maxWidth=\"xs\">\r\n<CssBaseline />\r\n<div className={classes.paper}>\r\n  <Avatar className={classes.avatar}>\r\n    <LockOutlinedIcon />\r\n  </Avatar>\r\n  <Typography component=\"h1\" variant=\"h5\">\r\n    Sign in\r\n  </Typography>\r\n  <form className={classes.form}  onSubmit={(e)=>{{props.handleSubmit(e,input)}}}>\r\n    <TextField\r\n      variant=\"outlined\"\r\n      margin=\"normal\"\r\n      required\r\n      fullWidth\r\n      id=\"email\"\r\n      label=\"Enter username\"\r\n      name=\"username\"\r\n      \r\n      autoFocus\r\n      inputRef={node => {\r\n        input = node;\r\n      }}\r\n    />\r\n    <FormControlLabel\r\n      control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n      label=\"Remember me\"\r\n    />\r\n    <Button\r\n      type=\"submit\"\r\n      fullWidth\r\n      variant=\"contained\"\r\n      color=\"primary\"\r\n      className={classes.submit}  \r\n    >\r\n      Sign In\r\n    </Button>\r\n  </form>\r\n</div>\r\n</Container>\r\n);\r\n}\r\n    Signin.propTypes={\r\n        handleSubmit:PropTypes.func.isRequired\r\n    }\r\n    export default Signin;\r\n","\r\nexport const ADD_USER = \"ADD_USER\"\r\nexport const USER_CREATED=\"USER_CREATED\"\r\nexport const USERS_LIST = \"USERS_LIST\"\r\nexport const SEND_MESSAGE = \"SEND_MESSAGE\"\r\nexport const MESSAGE_SENT=\"MESSAGE_SENT\"\r\nexport const GET_MESSAGES = \"GET_MESSAGES\"\r\nexport const CLEAR_MESSAGES=\"CLEAR_MESSAGES\"\r\nexport const GET_ROOMS = \"GET_ROOMS\"\r\nexport const ROOM_LIST=\"ROOM_LIST\"\r\nexport const CREATE_ROOM = \"CREATE_ROOM\"\r\nexport const JOIN_ROOM = \"JOIN_ROOM\"\r\nexport const ENTER_ROOM=\"ENTER_ROOM\"\r\nexport const USER_PROPORTIES=\"USER_PROPORTIES\"\r\n\r\n","import * as types from '../constants/ActionTypes'\r\n\r\nexport const addUser=user=>({\r\n    type:types.ADD_USER,\r\n    payload:user\r\n})\r\n\r\n\r\nexport const getRooms=()=>({\r\ntype:types.GET_ROOMS\r\n})\r\n\r\nexport const roomList=(rooms)=>({\r\n    type:types.ROOM_LIST,\r\n    payload:rooms\r\n})\r\n\r\nexport const sendMessage=message=>({\r\n type:types.SEND_MESSAGE,\r\n payload:message\r\n})\r\n\r\nexport const createRoom=room=>({\r\n    type:types.CREATE_ROOM,\r\n    payload:room\r\n})\r\n\r\nexport const joinRoom=(roomId,roomName)=>({\r\n    type:types.JOIN_ROOM,\r\n    payload:{roomId,roomName}\r\n})\r\n\r\nexport  const getMessages=message=>({\r\ntype:types.GET_MESSAGES,\r\npayload:message\r\n})\r\n\r\nexport const userCreated=user=>({\r\n    type:types.USER_CREATED,\r\n    payload:user\r\n})\r\n\r\nexport const enterRoom=roomId=>({\r\n    type:types.ENTER_ROOM,\r\n    payload:roomId\r\n})\r\n\r\nexport const userProporties=proporties=>({\r\n    type:types.USER_PROPORTIES,\r\n    payload:proporties\r\n})","import {connect} from 'react-redux'\r\nimport SigninComponent from '../components/Signup'\r\nimport {addUser} from '../actions/Index'\r\n\r\nconst mapDispatchProps=(dispatch)=>({\r\n \r\nhandleSubmit:(e,input)=>{  \r\n   e.preventDefault()\r\n   dispatch(addUser(input.value))\r\n}\r\n})\r\n\r\nexport const Signin=connect(()=>({}),mapDispatchProps)(SigninComponent)","import React, {Component} from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport PropTypes from 'prop-types'\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\n  class MessageList extends Component {\r\n componentDidUpdate(){\r\n   const node=ReactDOM.findDOMNode(this)\r\n   node.scrollTop=node.scrollHeight\r\n }\r\n\r\n      render() {\r\n       \r\n        if(!this.props.currentRoom){\r\n          return(\r\n          \r\n            <div className='message-list'>\r\n            <div className='join-room'>\r\n            &larr;Join a room!\r\n            </div>\r\n            </div>\r\n          )\r\n        }\r\n        else{\r\n\r\n          return(\r\n           \r\n              <ul className=\"message-list\">\r\n                 <Scrollbars\r\n                  style={{ height: '100%' }}          \r\n                  >\r\n                  {this.props.messages.map((message, index) => (\r\n                      <li key={index}>\r\n                          <div className='message'>\r\n                          <img src={`${message[3]}`} className='profile-photo' alt='profile'/>\r\n                          <div className='message-details'>\r\n                          <div className='date-name'>\r\n                          <span className=\"message-sender\">{`${message[0]}`}</span>\r\n                          <span className=\"message-date\">{` ${message[2].slice(11,16)} PM`}</span>\r\n                          </div>\r\n                          <div className='message-text'>\r\n                          <p className='texte'>{message[1]}</p>\r\n                          </div>\r\n                          </div>\r\n                          </div>\r\n                      </li>\r\n                  ))}                    \r\n                  </Scrollbars>\r\n              </ul> \r\n          )\r\n      }\r\n    }\r\n  }\r\n\r\n  MessageList.propTypes={\r\n    currentRoom:PropTypes.string,\r\n    currentUser:PropTypes.string,\r\n    messages:PropTypes.array\r\n  }\r\n  export default MessageList;\r\n","import MessageListComponent from '../components/MessageList'\r\nimport {connect} from 'react-redux'\r\nimport {getMessages} from '../actions/Index'\r\n\r\n\r\nconst mapDispatchProps=(roomId,dispatch)=>({\r\n    dispatch:()=>{\r\n        dispatch(getMessages(roomId))\r\n    }\r\n})\r\n\r\nconst mapStateToProps=state=>({\r\n    messages:state.messages.messagess,\r\n    currentRoom:state.rooms.currentRoomId,\r\n    currentUser:state.user.currentUser,\r\n    \r\n})\r\n\r\n\r\n\r\nexport const MessageList=connect(mapStateToProps,mapDispatchProps)(MessageListComponent)\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n  const Room=props=>{ \r\n          return(\r\n            <div className='current-room'>\r\n            <h1 className='room-name'>{props.currentRoom?`#${props.currentRoom}`:''}</h1>   \r\n            </div>\r\n          )\r\n      }\r\n\r\n  Room.propTypes={\r\n   currentRoom:PropTypes.string,\r\n  }\r\n  export default Room;\r\n","import RoomHeaderComponent from '../components/RoomHeader'\r\nimport {connect} from 'react-redux'\r\n\r\n\r\n\r\nconst mapStateToProps=state=>({  \r\n    currentRoom:state.rooms.currentRoomName,  \r\n})\r\n\r\n\r\n\r\nexport const RoomHeader=connect(mapStateToProps)(RoomHeaderComponent)\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n      marginLeft: theme.spacing(1),\r\n      marginRight: theme.spacing(1),\r\n     \r\n    },\r\n  }));\r\n\r\n const Input=props=> {\r\n    const classes = useStyles()\r\n    let input \r\n        return (\r\n        <form onSubmit={(e)=>{return  props.dispatch(e),input.value=''}} className=\"input-field\">\r\n        <TextField\r\n        disabled={props.currentRoom? false:true}\r\n        id=\"message\"\r\n        label=\"Type a Message\"\r\n        className={classes.textField}\r\n        type=\"text\"\r\n        autoComplete=\"off\"\r\n        margin=\"normal\"\r\n        fullWidth\r\n        inputRef={node => {\r\n          input = node;\r\n        }}\r\n        \r\n      />\r\n      <button className=\"submit send-button\" disabled={props.currentRoom? false:true} ></button>\r\n             </form>\r\n         )\r\n }\r\n\r\n Input.propTypes={\r\n    dispatch:PropTypes.func.isRequired, \r\n    currentRoom:PropTypes.string\r\n }\r\n export default Input;\r\n","import {connect} from 'react-redux'\r\nimport InputComponent from '../components/Input'\r\nimport {sendMessage} from '../actions/Index'\r\n\r\nconst mapDispatchProps=dispatch=>({\r\n    dispatch:(e)=>{dispatch(sendMessage(e.target[0].value))\r\n        \r\n    e.preventDefault()\r\n    }\r\n})\r\nconst mapStateToProps=state=>({\r\n    currentRoom:state.rooms.currentRoomId\r\n})\r\n\r\nexport const  Input=connect(mapStateToProps,mapDispatchProps) (InputComponent)\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n  const RoomList=props=>{ \r\n         \r\n          return(\r\n            <div className='room-list'>\r\n            <ul>\r\n            <h2>ROOMS:</h2>\r\n            <hr/>\r\n           \r\n            {props.rooms.map(room=>{\r\n              const active=props.currentRoomId===room.id ? 'active':'';\r\n              \r\n              return(\r\n                <li key={room.id} className={'room ' + active}>\r\n                 <a href=\"/#\" onClick={()=>props.subscribe(room.id,room.name,props.user)}\r\n                 >#{room.name}</a>\r\n                </li>\r\n              )\r\n            }\r\n            )}\r\n            </ul>     \r\n            </div>\r\n          )\r\n      }\r\n\r\n  RoomList.propTypes={\r\n   rooms:PropTypes.array,\r\n   currentRoomId:PropTypes.string,\r\n   user:PropTypes.object,\r\n   subscribe:PropTypes.func.isRequired\r\n  }\r\n  export default RoomList;\r\n","import RoomListComponent from '../components/RoomList'\r\nimport {connect} from 'react-redux'\r\nimport {joinRoom,getMessages} from '../actions/Index'\r\n\r\nconst mapStateProps=state=> ({\r\n  rooms:state.rooms.joinableRooms,\r\n  user:state.user.userProporties,\r\n  currentRoomId:state.rooms.currentRoomId\r\n})\r\n\r\nconst mapDispatchProps=(dispatch)=>({\r\n    dispatch:(room)=>{\r\n      \r\n        dispatch(joinRoom(room))\r\n    },\r\n    subscribe:(roomId,roomName,user)=>{\r\n      dispatch(joinRoom(roomId,roomName))\r\n   \r\n\r\n\r\n     user.subscribeToRoom({\r\n        roomId:roomId,\r\n        messageLimit: 100,\r\n        hooks: {\r\n         onMessage:(message)=>  {    \r\n           \r\n            const message1=[message.senderId, message.text, message.createdAt,message.sender.avatarURL]\r\n            dispatch(getMessages((message1)))\r\n          \r\n         },\r\n     }\r\n    })\r\n    }\r\n\r\n})\r\n\r\n\r\n\r\nexport const RoomList=connect(mapStateProps,mapDispatchProps)(RoomListComponent)","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(0),\r\n    marginRight: theme.spacing(1),\r\n  },\r\n}));\r\n\r\n const NewRoomForm=props=> {\r\n       let input\r\n       const classes=useStyles()\r\n      return(\r\n      <form onSubmit={(e)=> { return props.handleSubmit(e),input.value=''}} className=\"new-room-form\">\r\n      <TextField\r\n       id=\"room\"\r\n        label=\"Create room\"\r\n        className={classes.textField}\r\n        type=\"text\"\r\n        autoComplete=\"off\"\r\n        margin=\"normal\"\r\n        fullWidth\r\n        inputRef={node => {\r\n            input = node;\r\n          }}\r\n      />\r\n                <button className=\"submit room-button\"></button>\r\n                </form>\r\n          )\r\n      \r\n  }\r\n  NewRoomForm.propTypes={\r\n        handleSubmit:PropTypes.func.isRequired\r\n  }\r\n  export default NewRoomForm;\r\n","import NewRoomFormComponent from '../components/NewRoomForm'\r\nimport {connect} from 'react-redux'\r\nimport {createRoom} from '../actions/Index'\r\n\r\nconst mapDispatchProps=dispatch=>({\r\n    handleSubmit:(e)=>{\r\n        dispatch(createRoom(e.target[0].value))\r\n        e.preventDefault()\r\n    },\r\n    \r\n})\r\n\r\nexport const NewRoomForm=connect(null,mapDispatchProps) (NewRoomFormComponent)\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n  const User=props=>{ \r\n     \r\n          return(\r\n            <div className='current-user'>\r\n             <img src='http://pixelmator-pro.s3.amazonaws.com/community/avatar_empty@2x.png' className='profile-photo' alt='profile'/>\r\n            <h2 className='user-name'>{props.currentUser}</h2>   \r\n            </div>\r\n          )\r\n      }\r\n\r\n  User.propTypes={\r\n    currentUser:PropTypes.string,\r\n  }\r\n  export default User;\r\n","import UserComponent from '../components/UserHeader'\r\nimport {connect} from 'react-redux'\r\n\r\n\r\nconst mapStateToProps=state=>({  \r\n    currentUser:state.user.currentUser,\r\n   \r\n})\r\n\r\n\r\nexport const UserHeader=connect(mapStateToProps)(UserComponent)\r\n\r\n","     import React, {Component} from 'react';\r\n     import { ChatManager, TokenProvider } from '@pusher/chatkit-client';\r\n     import {MessageList} from '../containers/MessageList';\r\n     import {RoomHeader} from '../containers/RoomHeader';\r\n     import {Input} from '../containers/Input';\r\n     import {RoomList} from '../containers/RoomList';\r\n     import {NewRoomForm} from '../containers/NewRoomForm';\r\n     import {UserHeader} from '../containers/UserHeader'\r\n     import {getRooms,userProporties} from '../actions/Index'\r\n     import {connect} from 'react-redux'\r\n     import PropTypes from 'prop-types'\r\n\r\n     const mapStateToProps=state=>({\r\n       currentUser:state.user.currentUser,\r\n       proporties:state.user.userProporties\r\n     })\r\n     const mapDispatchToProps=dispatch=>({\r\n       dispatch:()=>{\r\n         dispatch(getRooms())\r\n       },\r\n       connectUser:(proporties)=>{\r\n         dispatch(userProporties(proporties))\r\n       }\r\n     })\r\n    class ChatApp extends Component {  \r\n      componentDidMount() {\r\n           \r\n           const chatManager = new ChatManager({\r\n            instanceLocator: \"v1:us1:a424e95a-3dd1-4577-bf41-581ed7120785\",\r\n            userId: this.props.currentUser,\r\n            tokenProvider: new TokenProvider({\r\n                url: \"https://us1.pusherplatform.io/services/chatkit_token_provider/v1/a424e95a-3dd1-4577-bf41-581ed7120785/token\"\r\n            })\r\n        })\r\n            chatManager\r\n                .connect()\r\n                .then(currentUser => {\r\n                  \r\n                  this.props.connectUser(currentUser)\r\n                 \r\n                       this.props.dispatch()     \r\n                  })\r\n\r\n                .catch(error => console.log(error))\r\n              }\r\n        render() {\r\n            return (\r\n              <div className='chat-app'>\r\n                   <RoomList/>\r\n                   <NewRoomForm />\r\n                   <UserHeader/>\r\n                   <RoomHeader/>\r\n                   <MessageList/>\r\n                   <Input />\r\n               </div>\r\n            )\r\n        }\r\n    }\r\n    ChatApp.propTypes={\r\n      currentUser:PropTypes.string,\r\n      proporties:PropTypes.object,\r\n      dispatch:PropTypes.func.isRequired,\r\n      connectUser:PropTypes.func.isRequired\r\n    }\r\n\r\n   export default connect (mapStateToProps,mapDispatchToProps)(ChatApp);\r\n"," import React, { Component } from 'react';\n import {Signin} from './containers/Signin';\n import ChatApp from './components/ChatApp';\n import {connect} from \"react-redux\";\n\nconst mapStateToProps=(state)=>{\n    return{ \n      user:state.user.currentUser\n    }\n   \n}\n   class App extends Component {\n    state={\n        wiew:false\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const user=this.props.currentUser;\n       if (prevProps.wiew!==user){\n          \n           this.setState({\n           wiew:true\n       })}\n    }\n         render() {\n         return (\n               <div className=\"App\">\n                   {!this.props.user ? (<Signin/>) : (<ChatApp/>)}\n\n               </div>\n           );\n       }\n       }\n       export default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as types from '../constants/ActionTypes'\r\n\r\nconst initialState={\r\n  messages:[],\r\n}\r\nconst message=(state=initialState,action)=>{\r\n   \r\n    switch(action.type){\r\n        case types.MESSAGE_SENT:\r\n            return Object.assign({},state,{\r\n              \r\n                messagess:state.messagess.concat([action.payload])\r\n            });\r\n       \r\n        case types.CLEAR_MESSAGES:\r\n            return Object.assign({},state,{\r\n              \r\n                messagess:[]\r\n            });\r\n            default:\r\n                return state;\r\n    }\r\n}\r\nexport default message","import * as types from '../constants/ActionTypes'\r\n\r\nconst initialState={\r\n    currentUser: '',\r\n    currentId: '',\r\n    userProporties:null,\r\n    users: []\r\n   \r\n    \r\n}\r\n\r\nconst user=(state=initialState,action)=>{\r\n    if(action.type===types.USER_CREATED){\r\n        return Object.assign({},state, {\r\n            currentUser:state.currentUser.concat(action.payload),\r\n            currentId:state.currentUser.concat(action.payload)\r\n       \r\n        })\r\n    }\r\n    else if(action.type===types.USER_PROPORTIES){\r\n       \r\n        return Object.assign({},state,{  \r\n         userProporties:action.payload,\r\n         user:action.payload.users\r\n        \r\n        })\r\n    }\r\n    else {\r\n        return state\r\n    }\r\n   \r\n}\r\n\r\nexport default user","import * as types from '../constants/ActionTypes'\r\n\r\nconst initialState={\r\n    currentRoomId: null,\r\n    currentRoomName:'',\r\n    joinableRooms:[],\r\n    joinedRooms:[]\r\n}\r\n\r\nconst rooms=(state=initialState,action)=>{\r\n   \r\n    switch(action.type){\r\n        \r\n        case types.ROOM_LIST:\r\n            \r\n            return Object.assign({},state,{\r\n                joinableRooms:action.payload\r\n              \r\n            });\r\n        case types.ENTER_ROOM:\r\n            return Object.assign({},state,{\r\n                currentRoomId:action.payload.roomId,\r\n                currentRoomName:action.payload.roomName\r\n            })\r\n            default:\r\n                return state;\r\n    }\r\n}\r\n\r\nexport default rooms;","import {combineReducers} from 'redux'\r\nimport messages from './messages'\r\nimport user from './user'\r\nimport rooms from './rooms'\r\n\r\n\r\nconst reducers=combineReducers({\r\n     messages,\r\n     user,\r\n     rooms\r\n})\r\n\r\nexport default reducers;","import {takeEvery,put} from 'redux-saga/effects'\r\nimport * as types from '../constants/ActionTypes'\r\n\r\n\r\n\r\nfunction* watchUser(){\r\n    yield takeEvery(types.ADD_USER,workerUser)\r\n}\r\n\r\nfunction* workerUser(action){\r\n    try{    \r\n       let success=false;\r\n       const username=action.payload;\r\n       const Chatkit = require(\"@pusher/chatkit-server\");\r\n       const chatkit = new Chatkit.default({\r\n        instanceLocator: \"v1:us1:a424e95a-3dd1-4577-bf41-581ed7120785\",\r\n        key: \"8a5a334a-de88-46ac-9efd-7230b4fb38b0:JiFCebLQ2pofO6+fMpuMHEPYoRy4ZUcH/1vNOsnZqwo=\"\r\n   })\r\n\r\n   yield chatkit.createUser({\r\n                   id: username,\r\n                   name: username,\r\n                   avatarURL:'http://pixelmator-pro.s3.amazonaws.com/community/avatar_empty@2x.png'              \r\n               })\r\n               .then((currentUser) => {\r\n                 \r\n               success=true\r\n               }).catch((err) => {\r\n                        if(err.status === 400) {\r\n                           \r\n                    success=true\r\n                   } else {\r\n                       console.log(err.status);\r\n                   }\r\n               });    \r\n               if(success) yield put ({type:types.USER_CREATED, payload:username})\r\n               \r\n     \r\n    }\r\n    catch(e){\r\n     console.log(e)\r\n    }\r\n    \r\n}\r\n\r\nexport default watchUser","import {takeEvery,put} from 'redux-saga/effects'\r\nimport * as types from '../constants/ActionTypes'\r\n\r\nfunction* watchRoom(){\r\n    yield takeEvery(types.GET_ROOMS,workerRoom)\r\n}\r\n\r\nfunction* workerRoom(action){\r\n    try{\r\n       let roomsList\r\n       const Chatkit = require(\"@pusher/chatkit-server\");\r\n       const chatkit = new Chatkit.default({\r\n        instanceLocator: \"v1:us1:a424e95a-3dd1-4577-bf41-581ed7120785\",\r\n        key: \"8a5a334a-de88-46ac-9efd-7230b4fb38b0:JiFCebLQ2pofO6+fMpuMHEPYoRy4ZUcH/1vNOsnZqwo=\"\r\n   })\r\n\r\n   yield chatkit.getRooms({})\r\n   .then(rooms => roomsList=rooms)\r\n   .catch(err => console.error(err))\r\n\r\n     \r\n     if(roomsList) yield put ({type:types.ROOM_LIST, payload:roomsList})\r\n               \r\n    }\r\n    catch(e){\r\n     console.log(e)\r\n    }\r\n \r\n}\r\n\r\nexport default watchRoom","import {takeEvery,select} from 'redux-saga/effects'\r\nimport * as types from '../constants/ActionTypes'\r\n\r\n\r\n\r\nfunction* watchMessage(){\r\n    yield takeEvery(types.SEND_MESSAGE,workerMessage)\r\n}\r\n\r\nfunction* workerMessage(action){\r\n    try{\r\n  \r\n        const text=action.payload\r\n        \r\n         const getProporties=state=>state.user.userProporties\r\n        const user=yield select(getProporties)\r\n\r\n        const getCurrentRoom=state=>state.rooms.currentRoomId\r\n        const currentRoom=yield select(getCurrentRoom)\r\n       \r\n        user.sendMessage({\r\n            text,\r\n            roomId:currentRoom\r\n        })\r\n       \r\n    }\r\n    catch(e){\r\n     console.log(e)\r\n    }\r\n \r\n}\r\n\r\nexport default watchMessage","import {takeEvery,put,select} from 'redux-saga/effects'\r\nimport * as types from '../constants/ActionTypes'\r\n\r\n\r\n\r\nfunction* watchCreateRoom(){\r\n    yield takeEvery(types.CREATE_ROOM,workerCreateRoom)\r\n}\r\n\r\nfunction* workerCreateRoom(action){\r\n    try{\r\n        \r\n    const getProporties=state=>state.user.userProporties\r\n      const user=yield select(getProporties)\r\n        let success=false;\r\n        const name=action.payload\r\n        \r\n       \r\n           if(name.length>0){\r\n            yield user.createRoom({          \r\n            name\r\n            })\r\n            .then(success=true)\r\n            .catch(err=>console.log(err))\r\n    }\r\n\r\n    if(success){\r\n        yield put ({type:types.GET_ROOMS})\r\n       \r\n        \r\n    }\r\n}\r\n    catch(e){\r\n     console.log(e)\r\n    }\r\n \r\n}\r\n\r\nexport default watchCreateRoom","import {takeEvery,put} from 'redux-saga/effects'\r\nimport * as types from '../constants/ActionTypes'\r\n\r\n\r\n\r\nfunction* watchSubscribe(){\r\n    yield takeEvery(types.JOIN_ROOM,joinRoom)\r\n    yield takeEvery(types.GET_MESSAGES,getMessages)\r\n}\r\n\r\nfunction* joinRoom(action){\r\n    try{\r\n       \r\n        yield put ({type:types.CLEAR_MESSAGES})\r\n        const roomId=action.payload.roomId   \r\n        if(roomId) yield put ({type:types.ENTER_ROOM, payload:action.payload})\r\n\r\n    }\r\n    catch(e){\r\n     console.log(e)\r\n    }\r\n \r\n}\r\n\r\nfunction* getMessages(message){\r\n       \r\n    yield put ({type:types.MESSAGE_SENT,payload:message.payload})  \r\n   }\r\n\r\nexport default watchSubscribe","import {all} from 'redux-saga/effects'\r\nimport userSaga from './userSaga'\r\nimport roomSaga from './roomSaga'\r\nimport messageSaga from './messageSaga'\r\nimport createRoomSaga from './createRoomSaga'\r\nimport subscribeSaga from './subscribeSaga'\r\n\r\n\r\nexport default function* rootSaga(){\r\n    yield all([\r\n        userSaga(),\r\n        roomSaga(),\r\n        createRoomSaga(),\r\n        subscribeSaga(),\r\n        messageSaga(),\r\n    ])\r\n}","import { createStore, applyMiddleware,compose } from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport reducers from '../reducers/index'\r\nimport rootSaga from '../sagas/rootSaga'\r\n\r\nconst reduxDevTools =\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\r\nconst SagaMiddleware=createSagaMiddleware();\r\n\r\n\r\nconst store=createStore(\r\n    reducers,\r\n    compose(applyMiddleware(SagaMiddleware),reduxDevTools)\r\n   \r\n)\r\nSagaMiddleware.run(rootSaga)\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux'\nimport store from './store/index'\n\nReactDOM.render(<Provider store={store}> <App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}